#!/usr/bin/env bash
set -Eeuo pipefail

# ===== Paths =====
PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$PLUGIN_DIR/.env"
COMPOSE_FILE="$PLUGIN_DIR/compose.yaml"
NGINX_CONF="$PLUGIN_DIR/nginx.conf"
DATA_DIR="$PLUGIN_DIR/data"
OLLAMA_DATA="$DATA_DIR/ollama"

# ===== Requirements =====
REQ_CMDS=(docker awk sed grep cut tr head)
OPT_CMDS=(jq qrencode openssl)
DC="docker compose"
if ! command -v docker &>/dev/null; then
  echo "✖ Docker is not installed. Please install Docker Engine."; exit 1
fi
$DC version &>/dev/null || { command -v docker-compose &>/dev/null && DC="docker-compose" || { echo "✖ neither 'docker compose' nor 'docker-compose' found."; exit 1; }; }

missing_opt=()
for c in "${OPT_CMDS[@]}"; do command -v "$c" >/dev/null 2>&1 || missing_opt+=("$c"); done
if ((${#missing_opt[@]})); then
  echo "• Optional tools missing: ${missing_opt[*]}"
  if command -v apt-get &>/dev/null; then
    echo "→ Trying to install (Debian/Ubuntu)..."
    sudo apt-get update -y
    sudo apt-get install -y jq qrencode openssl || true
  fi
fi

mkdir -p "$OLLAMA_DATA"

# ===== Interactive config =====
read -rp "Secure gateway port (Nginx)? [8999]: " PROXY_PORT
PROXY_PORT="${PROXY_PORT:-8999}"

read -rp "External host (IP/domain for URL/QR)? [auto]: " EXT_HOST
if [[ -z "${EXT_HOST:-}" ]]; then
  EXT_HOST="$(hostname -I 2>/dev/null | awk '{print $1}')"
  [[ -z "$EXT_HOST" ]] && EXT_HOST="127.0.0.1"
fi

read -rp "CORS Origin (e.g., http://localhost:3000 or * for all)? [*]: " ALLOWED_ORIGINS
ALLOWED_ORIGINS="${ALLOWED_ORIGINS:-*}"

read -rp "Enable TLS? (do you have your own certificate) [y/N]: " enable_tls
ENABLE_TLS=0
TLS_CERT_PATH=""
TLS_KEY_PATH=""
if [[ "$enable_tls" =~ ^[Yy]$ ]]; then
  ENABLE_TLS=1
  read -rp "Path to cert file (e.g., /etc/ssl/certs/fullchain.pem): " TLS_CERT_PATH
  read -rp "Path to key file  (e.g., /etc/ssl/private/privkey.pem): " TLS_KEY_PATH
fi

# GPU
ENABLE_GPU=0
if command -v nvidia-smi &>/dev/null; then
  read -rp "Enable GPU (NVIDIA)? [y/N]: " ans
  [[ "$ans" =~ ^[Yy]$ ]] && ENABLE_GPU=1
fi

# Pre-pull models
read -rp "List of models to pre-pull (space-separated, e.g., 'llama3:8b mistral:7b')? [empty=none]: " PULL_MODELS
PULL_MODELS="${PULL_MODELS:-}"

# Bearer token
if [[ -f "$ENV_FILE" && -s "$ENV_FILE" && "$(grep -c '^API_KEY=' "$ENV_FILE" || true)" -gt 0 ]]; then
  API_KEY="$(grep '^API_KEY=' "$ENV_FILE" | cut -d'=' -f2-)"
else
  if command -v openssl &>/dev/null; then
    API_KEY="$(openssl rand -hex 32)"
  else
    API_KEY="$(head -c 64 /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 64)"
  fi
fi

# ===== Write .env =====
cat >"$ENV_FILE" <<EOF
# Generated by install.sh
EXT_HOST=$EXT_HOST
PROXY_PORT=$PROXY_PORT
API_KEY=$API_KEY
ENABLE_TLS=$ENABLE_TLS
TLS_CERT_PATH=$TLS_CERT_PATH
TLS_KEY_PATH=$TLS_KEY_PATH
ALLOWED_ORIGINS=$ALLOWED_ORIGINS
ENABLE_GPU=$ENABLE_GPU
PULL_MODELS=$PULL_MODELS
OLLAMA_PORT=11434
EOF
echo "• Saved: $ENV_FILE"

# ===== Write compose.yaml =====
GPU_SNIPPET=""
if [[ "$ENABLE_GPU" -eq 1 ]]; then
  GPU_SNIPPET="    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n    gpus: all"
fi

cat >"$COMPOSE_FILE" <<YAML
version: "3.9"
name: ollama-secure
services:
  proxy:
    image: nginx:1.25-alpine
    container_name: ollama-proxy
    ports:
      - "\${PROXY_PORT}:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data:/data:ro
      - \${TLS_CERT_PATH:-/etc/ssl/certs/ssl-cert-snakeoil.pem}:/etc/ssl/certs/ollama.crt:ro
      - \${TLS_KEY_PATH:-/etc/ssl/private/ssl-cert-snakeoil.key}:/etc/ssl/private/ollama.key:ro
    environment:
      - API_KEY=\${API_KEY}
      - EXT_HOST=\${EXT_HOST}
      - ALLOWED_ORIGINS=\${ALLOWED_ORIGINS}
      - ENABLE_TLS=\${ENABLE_TLS}
    depends_on:
      - ollama
    restart: unless-stopped
    networks: [ollamanet]

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ./data/ollama:/root/.ollama
    expose:
      - "\${OLLAMA_PORT}"
    restart: unless-stopped
    networks: [ollamanet]
$(printf "%s" "$GPU_SNIPPET")
networks:
  ollamanet:
    driver: bridge
YAML
echo "• Compose written: $COMPOSE_FILE"

# ===== Write nginx.conf =====
cat >"$NGINX_CONF" <<'NGINX'
worker_processes auto;
events { worker_connections 1024; }
http {
  map $http_authorization $auth_token {
    default "";
    "~*^Bearer\s+(?<token>[^ ]+)$" $token;
  }
  map $auth_token $is_authorized {
    default 0;
    API_KEY_PLACEHOLDER 1;
  }

  map $request_method $cors_preflight {
    default 0;
    "OPTIONS" 1;
  }

  limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;

  upstream ollama_upstream { server ollama:11434; }

  server {
    listen 8080;

    location = /healthz {
      add_header Content-Type application/json;
      return 200 '{"ok":true}';
    }

    if ($cors_preflight = 1) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Access-Control-Max-Age 86400 always;
      return 204;
    }

    if ($is_authorized = 0) {
      add_header WWW-Authenticate 'Bearer realm="ollama-secure", error="invalid_token"' always;
      return 401;
    }

    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Vary Origin always;
    add_header Access-Control-Allow-Credentials true always;

    location /ollama/ {
      limit_req zone=api burst=40 nodelay;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://ollama_upstream/;
    }
  }

  server {
    listen 8443 ssl;
    ssl_certificate     /etc/ssl/certs/ollama.crt;
    ssl_certificate_key /etc/ssl/private/ollama.key;

    location = /healthz {
      add_header Content-Type application/json;
      return 200 '{"ok":true}';
    }

    if ($cors_preflight = 1) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Access-Control-Max-Age 86400 always;
      return 204;
    }

    if ($is_authorized = 0) {
      add_header WWW-Authenticate 'Bearer realm="ollama-secure", error="invalid_token"' always;
      return 401;
    }

    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Vary Origin always;
    add_header Access-Control-Allow-Credentials true always;

    location /ollama/ {
      limit_req zone=api burst=40 nodelay;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://ollama_upstream/;
    }
  }
}
NGINX

# Replace API_KEY placeholder safely
tmp="$(mktemp)"
api_key_escaped="$(printf '%s' "$API_KEY" | sed -e 's/[\/&]/\\&/g')"
sed "s/API_KEY_PLACEHOLDER/$api_key_escaped/g" "$NGINX_CONF" > "$tmp"
mv "$tmp" "$NGINX_CONF"

echo "✅ Installation complete.
- Env: $ENV_FILE
- Compose: $COMPOSE_FILE
- Nginx: $NGINX_CONF
- Data: $OLLAMA_DATA

Now run ./start.sh"
