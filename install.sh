#!/usr/bin/env bash
set -Eeuo pipefail

# ===== Paths =====
PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$PLUGIN_DIR/.env"
COMPOSE_FILE="$PLUGIN_DIR/compose.yaml"
NGINX_CONF="$PLUGIN_DIR/nginx.conf"
DATA_DIR="$PLUGIN_DIR/data"
OLLAMA_DATA="$DATA_DIR/ollama"

# ===== Requirements =====
REQ_CMDS=(docker awk sed grep cut tr head)
OPT_CMDS=(jq qrencode openssl)
DC="docker compose"
if ! command -v docker &>/dev/null; then
  echo "✖ Docker is not installed. Please install Docker Engine."; exit 1
fi
$DC version &>/dev/null || { command -v docker-compose &>/dev/null && DC="docker-compose" || { echo "✖ neither 'docker compose' nor 'docker-compose' found."; exit 1; }; }

missing_opt=()
for c in "${OPT_CMDS[@]}"; do command -v "$c" >/dev/null 2>&1 || missing_opt+=("$c"); done
if ((${#missing_opt[@]})); then
  echo "• Optional tools missing: ${missing_opt[*]}"
  if command -v apt-get &>/dev/null; then
    echo "→ Trying to install (Debian/Ubuntu)..."
    sudo apt-get update -y
    sudo apt-get install -y jq qrencode openssl || true
  fi
fi

mkdir -p "$OLLAMA_DATA"

# ===== Interactive config =====
read -rp "Secure gateway port (Nginx)? [8999]: " PROXY_PORT
PROXY_PORT="${PROXY_PORT:-8999}"

read -rp "External host (IP/domain for URL/QR)? [auto]: " EXT_HOST
if [[ -z "${EXT_HOST:-}" ]]; then
  EXT_HOST="$(hostname -I 2>/dev/null | awk '{print $1}')"
  [[ -z "$EXT_HOST" ]] && EXT_HOST="127.0.0.1"
fi

read -rp "CORS Origin (single or comma-separated, e.g., http://localhost:3000 or * for all)? [*]: " ALLOWED_ORIGINS
ALLOWED_ORIGINS="${ALLOWED_ORIGINS:-*}"

read -rp "Enable TLS? (do you have your own certificate) [y/N]: " enable_tls
ENABLE_TLS=0
TLS_CERT_PATH=""
TLS_KEY_PATH=""
if [[ "$enable_tls" =~ ^[Yy]$ ]]; then
  ENABLE_TLS=1
  read -rp "Path to cert file (e.g., /etc/ssl/certs/fullchain.pem): " TLS_CERT_PATH
  read -rp "Path to key  file (e.g., /etc/ssl/private/privkey.pem): " TLS_KEY_PATH
  # validate files
  if [[ ! -f "$TLS_CERT_PATH" || ! -f "$TLS_KEY_PATH" ]]; then
    echo "⚠ TLS disabled: provided cert/key path not found."
    ENABLE_TLS=0
    TLS_CERT_PATH=""; TLS_KEY_PATH=""
  fi
fi

# GPU
ENABLE_GPU=0
if command -v nvidia-smi &>/dev/null; then
  read -rp "Enable GPU (NVIDIA)? [y/N]: " ans
  [[ "$ans" =~ ^[Yy]$ ]] && ENABLE_GPU=1
fi

# Pre-pull models (space-separated)
read -rp "List of models to pre-pull (space-separated, e.g., 'llama3:8b mistral:7b')? [empty=none]: " PULL_MODELS
PULL_MODELS="${PULL_MODELS:-}"

# Bearer token
if [[ -f "$ENV_FILE" && -s "$ENV_FILE" && "$(grep -c '^API_KEY=' "$ENV_FILE" || true)" -gt 0 ]]; then
  API_KEY="$(grep '^API_KEY=' "$ENV_FILE" | cut -d'=' -f2-)"
else
  if command -v openssl &>/dev/null; then
    API_KEY="$(openssl rand -hex 32)"
  else
    API_KEY="$(head -c 64 /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 64)"
  fi
fi

# Build CORS regex (for non-*) -- support comma-separated list
CORS_MODE="STAR"
CORS_REGEX=""
if [[ "$ALLOWED_ORIGINS" != "*" ]]; then
  CORS_MODE="LIST"
  # split by comma and/or spaces
  IFS=',' read -r -a ORIG_ARR <<<"${ALLOWED_ORIGINS}"
  esc_list=()
  for o in "${ORIG_ARR[@]}"; do
    o_trim="$(echo "$o" | xargs)"
    [[ -z "$o_trim" ]] && continue
    # escape regex special chars
    esc="$(printf '%s' "$o_trim" | sed -e 's/[]\/$*.^|[]/\\&/g')"
    esc_list+=("$esc")
  done
  CORS_REGEX="$(IFS="|"; echo "${esc_list[*]}")"
fi

# ===== Write .env =====
cat >"$ENV_FILE" <<EOF
# Generated by install.sh (v1.0.1)
EXT_HOST=$EXT_HOST
PROXY_PORT=$PROXY_PORT
API_KEY=$API_KEY
ENABLE_TLS=$ENABLE_TLS
TLS_CERT_PATH=$TLS_CERT_PATH
TLS_KEY_PATH=$TLS_KEY_PATH
ALLOWED_ORIGINS=$ALLOWED_ORIGINS
ENABLE_GPU=$ENABLE_GPU
PULL_MODELS=$PULL_MODELS
OLLAMA_PORT=11434
EOF
echo "• Saved: $ENV_FILE"

# ===== Write compose.yaml (dynamic ports & TLS mounts) =====
GPU_SNIPPET=""
if [[ "$ENABLE_GPU" -eq 1 ]]; then
  GPU_SNIPPET="    gpus: all"
fi

# decide port mapping
if [[ "$ENABLE_TLS" -eq 1 ]]; then
  MAP_PORT_LINE="      - \"\${PROXY_PORT}:8443\""
  TLS_MOUNTS="      - \${TLS_CERT_PATH}:/etc/ssl/certs/ollama.crt:ro
      - \${TLS_KEY_PATH}:/etc/ssl/private/ollama.key:ro"
else
  MAP_PORT_LINE="      - \"\${PROXY_PORT}:8080\""
  TLS_MOUNTS=""
fi

cat >"$COMPOSE_FILE" <<YAML
name: ollama-secure
services:
  proxy:
    image: nginx:1.25-alpine
    container_name: ollama-proxy
    ports:
$MAP_PORT_LINE
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data:/data:ro
$TLS_MOUNTS
    environment:
      - API_KEY=\${API_KEY}
      - EXT_HOST=\${EXT_HOST}
      - ALLOWED_ORIGINS=\${ALLOWED_ORIGINS}
      - ENABLE_TLS=\${ENABLE_TLS}
    depends_on:
      - ollama
    restart: unless-stopped
    networks: [ollamanet]

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ./data/ollama:/root/.ollama
    expose:
      - "\${OLLAMA_PORT}"
    restart: unless-stopped
    networks: [ollamanet]
$GPU_SNIPPET
networks:
  ollamanet:
    driver: bridge
YAML
echo "• Compose written: $COMPOSE_FILE"

# ===== Write nginx.conf (dynamic: add TLS server only if ENABLE_TLS=1) =====
# Common (HTTP server on 8080 always present)
cat >"$NGINX_CONF" <<'NGINX'
worker_processes auto;
events { worker_connections 1024; }
http {
  # Avoid map_hash errors for long tokens
  map_hash_max_size 4096;
  map_hash_bucket_size 128;

  # Parse Bearer token
  map $http_authorization $auth_token {
    default "";
    "~*^Bearer\s+(?<token>[^ ]+)$" $token;
  }

  # Placeholder replaced by install.sh
  map $auth_token $is_authorized {
    default 0;
    API_KEY_PLACEHOLDER 1;
  }

  # CORS preflight detector
  map $request_method $cors_preflight {
    default 0;
    "OPTIONS" 1;
  }

  # If ALLOW-ORIGINS='*' we'll replace header value with '*'
  # Otherwise we generate a map below when needed.
  # Placeholders for conditional inclusion:
  # __CORS_MAP_BLOCK__
  # __CORS_HEADER_VALUE__

  # Basic rate limit
  limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;

  upstream ollama_upstream { server ollama:11434; }

  server {
    listen 8080;

    # Health (no auth)
    location = /healthz {
      add_header Content-Type application/json;
      return 200 '{"ok":true}';
    }

    # CORS preflight before auth
    if ($cors_preflight = 1) {
      add_header Access-Control-Allow-Origin __CORS_HEADER_VALUE__ always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Access-Control-Max-Age 86400 always;
      return 204;
    }

    # Require Bearer
    if ($is_authorized = 0) {
      add_header WWW-Authenticate 'Bearer realm="ollama-secure", error="invalid_token"' always;
      return 401;
    }

    # CORS on responses
    add_header Access-Control-Allow-Origin __CORS_HEADER_VALUE__ always;
    add_header Vary Origin always;
    add_header Access-Control-Allow-Credentials true always;

    # Proxy to Ollama
    location /ollama/ {
      limit_req zone=api burst=40 nodelay;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://ollama_upstream/;
    }
  }
  # __TLS_BLOCK__
}
NGINX

# Replace API_KEY in map
api_key_escaped="$(printf '%s' "$API_KEY" | sed -e 's/[\/&]/\\&/g')"
sed -i "s/API_KEY_PLACEHOLDER/$api_key_escaped/" "$NGINX_CONF"

# Inject CORS logic
if [[ "$ALLOWED_ORIGINS" == "*" ]]; then
  sed -i "s/__CORS_MAP_BLOCK__//" "$NGINX_CONF"
  sed -i "s/__CORS_HEADER_VALUE__/*/" "$NGINX_CONF"
else
  # build map block with regex
  cors_regex="$(printf '%s' "$CORS_REGEX" | sed -e 's/[\/&]/\\&/g')"
  CORS_MAP_BLOCK=$(cat <<EOM
  map \$http_origin \$cors_origin {
    default "";
    "~*^(${cors_regex})$" \$http_origin;
  }
EOM
)
  # insert block and use $cors_origin for header
  sed -i "s#__CORS_MAP_BLOCK__#${CORS_MAP_BLOCK//$'\n'/\\n}#" "$NGINX_CONF"
  sed -i "s/__CORS_HEADER_VALUE__/\$cors_origin/" "$NGINX_CONF"
fi

# Inject / remove TLS block
if [[ "$ENABLE_TLS" -eq 1 ]]; then
  TLS_BLOCK=$(cat <<'EOT'
  server {
    listen 8443 ssl;
    ssl_certificate     /etc/ssl/certs/ollama.crt;
    ssl_certificate_key /etc/ssl/private/ollama.key;

    location = /healthz {
      add_header Content-Type application/json;
      return 200 '{"ok":true}';
    }

    if ($cors_preflight = 1) {
      add_header Access-Control-Allow-Origin __CORS_HEADER_VALUE__ always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
      add_header Access-Control-Max-Age 86400 always;
      return 204;
    }

    if ($is_authorized = 0) {
      add_header WWW-Authenticate 'Bearer realm="ollama-secure", error="invalid_token"' always;
      return 401;
    }

    add_header Access-Control-Allow-Origin __CORS_HEADER_VALUE__ always;
    add_header Vary Origin always;
    add_header Access-Control-Allow-Credentials true always;

    location /ollama/ {
      limit_req zone=api burst=40 nodelay;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://ollama_upstream/;
    }
  }
EOT
)
  # put TLS block
  sed -i "s#__TLS_BLOCK__#${TLS_BLOCK//$'\n'/\\n}#" "$NGINX_CONF"
  # fix CORS header placeholder inside TLS block
  if [[ "$ALLOWED_ORIGINS" == "*" ]]; then
    sed -i "s/__CORS_HEADER_VALUE__/*/g" "$NGINX_CONF"
  else
    sed -i "s/__CORS_HEADER_VALUE__/\$cors_origin/g" "$NGINX_CONF"
  fi
else
  sed -i "s#__TLS_BLOCK__##" "$NGINX_CONF"
  # also remove any stray CORS placeholder (shouldn't exist outside TLS now)
  sed -i "s/__CORS_HEADER_VALUE__/*/g" "$NGINX_CONF"
fi

echo "✅ Installation complete.
- Env: $ENV_FILE
- Compose: $COMPOSE_FILE
- Nginx: $NGINX_CONF
- Data: $OLLAMA_DATA

Now run ./start.sh"
